
blackpill_baremetal_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001c0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000354  08000354  00001354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000370  08000370  00001378  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000370  08000370  00001378  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000370  08000378  00001378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000370  08000370  00001370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000374  08000374  00001374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000378  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000378  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000014f  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000014a  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000078  00000000  00000000  00001648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000004b  00000000  00000000  000016c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000000ed  00000000  00000000  0000170b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000001e3  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003437  00000000  00000000  000019db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00004e12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d8  00000000  00000000  00004e58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00004f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800033c 	.word	0x0800033c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800033c 	.word	0x0800033c

080001d4 <main>:
#include "gpio.h"
#include "uart.h"

int main()
{
 80001d4:	b5b0      	push	{r4, r5, r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
	char dataToSend[] = "Hello from STM32F401RCT6!";
 80001da:	4b07      	ldr	r3, [pc, #28]	@ (80001f8 <main+0x24>)
 80001dc:	1d3c      	adds	r4, r7, #4
 80001de:	461d      	mov	r5, r3
 80001e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001e8:	c403      	stmia	r4!, {r0, r1}
 80001ea:	8022      	strh	r2, [r4, #0]
	uart_init();
 80001ec:	f000 f806 	bl	80001fc <uart_init>
	//uart_write(dataToSend);

	while(1)
	{
		uart_read();
 80001f0:	f000 f840 	bl	8000274 <uart_read>
 80001f4:	e7fc      	b.n	80001f0 <main+0x1c>
 80001f6:	bf00      	nop
 80001f8:	08000354 	.word	0x08000354

080001fc <uart_init>:

//This flag will set if data can be written to be transmitted
#define TXE ((USART_SR >> 7)&(1U))

void uart_init()
{
 80001fc:	b480      	push	{r7}
 80001fe:	af00      	add	r7, sp, #0
	//Providing clock access to USART peripheral bus
	RCC_APB2ENR |= (1U<<4);
 8000200:	4b19      	ldr	r3, [pc, #100]	@ (8000268 <uart_init+0x6c>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a18      	ldr	r2, [pc, #96]	@ (8000268 <uart_init+0x6c>)
 8000206:	f043 0310 	orr.w	r3, r3, #16
 800020a:	6013      	str	r3, [r2, #0]

	//Set oversampling by 8
	USART_CR1 |= (1U<<15);
 800020c:	4b17      	ldr	r3, [pc, #92]	@ (800026c <uart_init+0x70>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a16      	ldr	r2, [pc, #88]	@ (800026c <uart_init+0x70>)
 8000212:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000216:	6013      	str	r3, [r2, #0]

	//1 stop bit, 8 data bits, n stop bits (n=0 by default according to to USART_CR2 register)
	USART_CR1 &= ~(1U<<12);
 8000218:	4b14      	ldr	r3, [pc, #80]	@ (800026c <uart_init+0x70>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a13      	ldr	r2, [pc, #76]	@ (800026c <uart_init+0x70>)
 800021e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000222:	6013      	str	r3, [r2, #0]

	//Enable interrupt to occur when data is ready to be read
	USART_CR1 = (1U<<5);
 8000224:	4b11      	ldr	r3, [pc, #68]	@ (800026c <uart_init+0x70>)
 8000226:	2220      	movs	r2, #32
 8000228:	601a      	str	r2, [r3, #0]

	//Enable interrupt to occur when data is ready to be written
	USART_CR1 = (1U<<7);
 800022a:	4b10      	ldr	r3, [pc, #64]	@ (800026c <uart_init+0x70>)
 800022c:	2280      	movs	r2, #128	@ 0x80
 800022e:	601a      	str	r2, [r3, #0]

	//Setting 208 (11010000) in mantissa and 3 (011) in fraction to set USART_DIV register to 208.3 for 9600 baud rate
	USART_BRR = (208U<<4 | 3U<<0);
 8000230:	4b0f      	ldr	r3, [pc, #60]	@ (8000270 <uart_init+0x74>)
 8000232:	f640 5203 	movw	r2, #3331	@ 0xd03
 8000236:	601a      	str	r2, [r3, #0]

	//Enable the receiver
	USART_CR1 |= (1U<<2);
 8000238:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <uart_init+0x70>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0b      	ldr	r2, [pc, #44]	@ (800026c <uart_init+0x70>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6013      	str	r3, [r2, #0]

	//Enable the transmitter
	USART_CR1 |= (1U<<3);
 8000244:	4b09      	ldr	r3, [pc, #36]	@ (800026c <uart_init+0x70>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a08      	ldr	r2, [pc, #32]	@ (800026c <uart_init+0x70>)
 800024a:	f043 0308 	orr.w	r3, r3, #8
 800024e:	6013      	str	r3, [r2, #0]

	//Enable USART
	USART_CR1 |= (1U<<13);
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <uart_init+0x70>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <uart_init+0x70>)
 8000256:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023844 	.word	0x40023844
 800026c:	4001100c 	.word	0x4001100c
 8000270:	40011008 	.word	0x40011008

08000274 <uart_read>:

char uart_read()
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	//Wait till RXNE is set i.e data is ready to be read
	while(!(RXNE));
 8000278:	bf00      	nop
 800027a:	4b07      	ldr	r3, [pc, #28]	@ (8000298 <uart_read+0x24>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0320 	and.w	r3, r3, #32
 8000282:	2b00      	cmp	r3, #0
 8000284:	d0f9      	beq.n	800027a <uart_read+0x6>

	//Return the received data
	return (USART_DR & 255U);
 8000286:	4b05      	ldr	r3, [pc, #20]	@ (800029c <uart_read+0x28>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	b2db      	uxtb	r3, r3
}
 800028c:	4618      	mov	r0, r3
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	40011000 	.word	0x40011000
 800029c:	40011004 	.word	0x40011004

080002a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a0:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a8:	480c      	ldr	r0, [pc, #48]	@ (80002dc <LoopForever+0x6>)
  ldr r1, =_edata
 80002aa:	490d      	ldr	r1, [pc, #52]	@ (80002e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ac:	4a0d      	ldr	r2, [pc, #52]	@ (80002e4 <LoopForever+0xe>)
  movs r3, #0
 80002ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b0:	e002      	b.n	80002b8 <LoopCopyDataInit>

080002b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002b6:	3304      	adds	r3, #4

080002b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002bc:	d3f9      	bcc.n	80002b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002be:	4a0a      	ldr	r2, [pc, #40]	@ (80002e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c0:	4c0a      	ldr	r4, [pc, #40]	@ (80002ec <LoopForever+0x16>)
  movs r3, #0
 80002c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002c4:	e001      	b.n	80002ca <LoopFillZerobss>

080002c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c8:	3204      	adds	r2, #4

080002ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002cc:	d3fb      	bcc.n	80002c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ce:	f000 f811 	bl	80002f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002d2:	f7ff ff7f 	bl	80001d4 <main>

080002d6 <LoopForever>:

LoopForever:
  b LoopForever
 80002d6:	e7fe      	b.n	80002d6 <LoopForever>
  ldr   r0, =_estack
 80002d8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80002dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002e4:	08000378 	.word	0x08000378
  ldr r2, =_sbss
 80002e8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002ec:	2000001c 	.word	0x2000001c

080002f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f0:	e7fe      	b.n	80002f0 <ADC_IRQHandler>
	...

080002f4 <__libc_init_array>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	4d0d      	ldr	r5, [pc, #52]	@ (800032c <__libc_init_array+0x38>)
 80002f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000330 <__libc_init_array+0x3c>)
 80002fa:	1b64      	subs	r4, r4, r5
 80002fc:	10a4      	asrs	r4, r4, #2
 80002fe:	2600      	movs	r6, #0
 8000300:	42a6      	cmp	r6, r4
 8000302:	d109      	bne.n	8000318 <__libc_init_array+0x24>
 8000304:	4d0b      	ldr	r5, [pc, #44]	@ (8000334 <__libc_init_array+0x40>)
 8000306:	4c0c      	ldr	r4, [pc, #48]	@ (8000338 <__libc_init_array+0x44>)
 8000308:	f000 f818 	bl	800033c <_init>
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	10a4      	asrs	r4, r4, #2
 8000310:	2600      	movs	r6, #0
 8000312:	42a6      	cmp	r6, r4
 8000314:	d105      	bne.n	8000322 <__libc_init_array+0x2e>
 8000316:	bd70      	pop	{r4, r5, r6, pc}
 8000318:	f855 3b04 	ldr.w	r3, [r5], #4
 800031c:	4798      	blx	r3
 800031e:	3601      	adds	r6, #1
 8000320:	e7ee      	b.n	8000300 <__libc_init_array+0xc>
 8000322:	f855 3b04 	ldr.w	r3, [r5], #4
 8000326:	4798      	blx	r3
 8000328:	3601      	adds	r6, #1
 800032a:	e7f2      	b.n	8000312 <__libc_init_array+0x1e>
 800032c:	08000370 	.word	0x08000370
 8000330:	08000370 	.word	0x08000370
 8000334:	08000370 	.word	0x08000370
 8000338:	08000374 	.word	0x08000374

0800033c <_init>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr

08000348 <_fini>:
 8000348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800034a:	bf00      	nop
 800034c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034e:	bc08      	pop	{r3}
 8000350:	469e      	mov	lr, r3
 8000352:	4770      	bx	lr
