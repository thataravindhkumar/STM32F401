
blackpill_baremetal_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000250  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003ec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000012f  00000000  00000000  00001416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000fe  00000000  00000000  00001545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00001648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000005f  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d1d  00000000  00000000  0000173f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000024e  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000035c5  00000000  00000000  000026aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00005c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000f4  00000000  00000000  00005cb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00005da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003cc 	.word	0x080003cc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003cc 	.word	0x080003cc

080001d4 <exti_init>:
#include "exti.h"
#include "gpio.h"

void exti_init()
{
 80001d4:	b480      	push	{r7}
 80001d6:	af00      	add	r7, sp, #0
	RCC_APB2ENR |= (1U<<14); //System configuration controller clock enabled
 80001d8:	4b1c      	ldr	r3, [pc, #112]	@ (800024c <exti_init+0x78>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	4a1b      	ldr	r2, [pc, #108]	@ (800024c <exti_init+0x78>)
 80001de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80001e2:	6013      	str	r3, [r2, #0]

	EXTI_IMR |= (1U<<0); //Interrupt request from line 0 is unmasked
 80001e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000250 <exti_init+0x7c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a19      	ldr	r2, [pc, #100]	@ (8000250 <exti_init+0x7c>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
	EXTI_RTSR &= ~(1U<<0); //Rising trigger disabled (for Event and Interrupt) for input line 0
 80001f0:	4b18      	ldr	r3, [pc, #96]	@ (8000254 <exti_init+0x80>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	4a17      	ldr	r2, [pc, #92]	@ (8000254 <exti_init+0x80>)
 80001f6:	f023 0301 	bic.w	r3, r3, #1
 80001fa:	6013      	str	r3, [r2, #0]
	EXTI_FTSR |= (1U<<0); //Falling trigger enabled (for Event and Interrupt) for input line 0
 80001fc:	4b16      	ldr	r3, [pc, #88]	@ (8000258 <exti_init+0x84>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a15      	ldr	r2, [pc, #84]	@ (8000258 <exti_init+0x84>)
 8000202:	f043 0301 	orr.w	r3, r3, #1
 8000206:	6013      	str	r3, [r2, #0]

	//Configuring PA0 as source input for the EXTI0 external interrupt
	SYSCFG_EXTICR1 &= ~(1U<<0);
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <exti_init+0x88>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a13      	ldr	r2, [pc, #76]	@ (800025c <exti_init+0x88>)
 800020e:	f023 0301 	bic.w	r3, r3, #1
 8000212:	6013      	str	r3, [r2, #0]
	SYSCFG_EXTICR1 &= ~(1U<<1);
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <exti_init+0x88>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a10      	ldr	r2, [pc, #64]	@ (800025c <exti_init+0x88>)
 800021a:	f023 0302 	bic.w	r3, r3, #2
 800021e:	6013      	str	r3, [r2, #0]
	SYSCFG_EXTICR1 &= ~(1U<<2);
 8000220:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <exti_init+0x88>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0d      	ldr	r2, [pc, #52]	@ (800025c <exti_init+0x88>)
 8000226:	f023 0304 	bic.w	r3, r3, #4
 800022a:	6013      	str	r3, [r2, #0]
	SYSCFG_EXTICR1 &= ~(1U<<3);
 800022c:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <exti_init+0x88>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0a      	ldr	r2, [pc, #40]	@ (800025c <exti_init+0x88>)
 8000232:	f023 0308 	bic.w	r3, r3, #8
 8000236:	6013      	str	r3, [r2, #0]

	NVIC_ISER0 |= (1U<<6); //Enable interrupt for EXTI0
 8000238:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <exti_init+0x8c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a08      	ldr	r2, [pc, #32]	@ (8000260 <exti_init+0x8c>)
 800023e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000242:	6013      	str	r3, [r2, #0]
}
 8000244:	bf00      	nop
 8000246:	46bd      	mov	sp, r7
 8000248:	bc80      	pop	{r7}
 800024a:	4770      	bx	lr
 800024c:	40023844 	.word	0x40023844
 8000250:	4000b000 	.word	0x4000b000
 8000254:	4000b008 	.word	0x4000b008
 8000258:	4000b00c 	.word	0x4000b00c
 800025c:	40013808 	.word	0x40013808
 8000260:	e000e200 	.word	0xe000e200

08000264 <exti0_handler>:

void exti0_handler() //Function for handling the interrupt
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	if(EXTI_PR & (1U<<0)) //Checking whether the interrupt flag at EXTI line 0 has been set
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <exti0_handler+0x24>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f003 0301 	and.w	r3, r3, #1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d007      	beq.n	8000284 <exti0_handler+0x20>
	{
		gpio_userled_toggle(); //If the flag is set, call the userled toggle function
 8000274:	f000 f844 	bl	8000300 <gpio_userled_toggle>
		EXTI_PR |= (1U<<0); //After toggling, clear the interrupt flag by writing 1 (yes its 1 and not 0)
 8000278:	4b03      	ldr	r3, [pc, #12]	@ (8000288 <exti0_handler+0x24>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a02      	ldr	r2, [pc, #8]	@ (8000288 <exti0_handler+0x24>)
 800027e:	f043 0301 	orr.w	r3, r3, #1
 8000282:	6013      	str	r3, [r2, #0]
	}
}
 8000284:	bf00      	nop
 8000286:	bd80      	pop	{r7, pc}
 8000288:	4000b014 	.word	0x4000b014

0800028c <gpio_init>:
#include "gpio.h" //Import gpio header for register definitions

void gpio_init()
{
 800028c:	b480      	push	{r7}
 800028e:	af00      	add	r7, sp, #0
	//Enabling clock for GPIOC and GPIOA
	RCC_AHB1ENR |= (1U<<2);
 8000290:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <gpio_init+0x64>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a16      	ldr	r2, [pc, #88]	@ (80002f0 <gpio_init+0x64>)
 8000296:	f043 0304 	orr.w	r3, r3, #4
 800029a:	6013      	str	r3, [r2, #0]
	RCC_AHB1ENR |= (1U<<0);
 800029c:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <gpio_init+0x64>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a13      	ldr	r2, [pc, #76]	@ (80002f0 <gpio_init+0x64>)
 80002a2:	f043 0301 	orr.w	r3, r3, #1
 80002a6:	6013      	str	r3, [r2, #0]

	//Setting PC13 (user LED) as GPIO output
	GPIOC_MODER |= (1U<<26);
 80002a8:	4b12      	ldr	r3, [pc, #72]	@ (80002f4 <gpio_init+0x68>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a11      	ldr	r2, [pc, #68]	@ (80002f4 <gpio_init+0x68>)
 80002ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80002b2:	6013      	str	r3, [r2, #0]
	GPIOC_MODER &= ~(1U<<27);
 80002b4:	4b0f      	ldr	r3, [pc, #60]	@ (80002f4 <gpio_init+0x68>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a0e      	ldr	r2, [pc, #56]	@ (80002f4 <gpio_init+0x68>)
 80002ba:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80002be:	6013      	str	r3, [r2, #0]

	//Setting PA0 (user button) as default high (pull up)
	GPIOA_PUPDR |= (1U<<0);
 80002c0:	4b0d      	ldr	r3, [pc, #52]	@ (80002f8 <gpio_init+0x6c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a0c      	ldr	r2, [pc, #48]	@ (80002f8 <gpio_init+0x6c>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA_PUPDR &= ~(1U<<1);
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <gpio_init+0x6c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a09      	ldr	r2, [pc, #36]	@ (80002f8 <gpio_init+0x6c>)
 80002d2:	f023 0302 	bic.w	r3, r3, #2
 80002d6:	6013      	str	r3, [r2, #0]

	//Setting PA0 (user button) as GPIO input
	GPIOA_MODER |= (0U<<0);
 80002d8:	4b08      	ldr	r3, [pc, #32]	@ (80002fc <gpio_init+0x70>)
 80002da:	4a08      	ldr	r2, [pc, #32]	@ (80002fc <gpio_init+0x70>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	6013      	str	r3, [r2, #0]
	GPIOA_MODER |= (0U<<1);
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <gpio_init+0x70>)
 80002e2:	4a06      	ldr	r2, [pc, #24]	@ (80002fc <gpio_init+0x70>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	6013      	str	r3, [r2, #0]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40023830 	.word	0x40023830
 80002f4:	40020800 	.word	0x40020800
 80002f8:	4002000c 	.word	0x4002000c
 80002fc:	40020000 	.word	0x40020000

08000300 <gpio_userled_toggle>:

void gpio_userled_toggle()
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
	GPIOC_ODR ^= (1U<<13);
 8000304:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <gpio_userled_toggle+0x18>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a03      	ldr	r2, [pc, #12]	@ (8000318 <gpio_userled_toggle+0x18>)
 800030a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40020814 	.word	0x40020814

0800031c <main>:
#include "gpio.h"
#include "exti.h"

int main()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	gpio_init();
 8000320:	f7ff ffb4 	bl	800028c <gpio_init>
	exti_init();
 8000324:	f7ff ff56 	bl	80001d4 <exti_init>

	while(1)
	{
		exti0_handler();
 8000328:	f7ff ff9c 	bl	8000264 <exti0_handler>
 800032c:	e7fc      	b.n	8000328 <main+0xc>
	...

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ffdb 	bl	800031c <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	2000001c 	.word	0x2000001c

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	@ (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	@ (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	@ (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
