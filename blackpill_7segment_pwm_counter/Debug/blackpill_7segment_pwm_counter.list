
blackpill_7segment_pwm_counter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002000  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002194  08002194  00003194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080021fc  080021fc  000031fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002204  08002204  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002204  08002204  00003204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002208  08002208  00003208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800220c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002218  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002218  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000834d  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001516  00000000  00000000  0000c389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000968  00000000  00000000  0000d8a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000742  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f88  00000000  00000000  0000e94a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f34  00000000  00000000  000238d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000871da  00000000  00000000  0002d806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b49e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002764  00000000  00000000  000b4a24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b7188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800217c 	.word	0x0800217c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	0800217c 	.word	0x0800217c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <LED.0>:
		  {0, 0, 0, 0, 0, 0, 0}, //8
		  {0, 0, 0, 1, 1, 0, 0} //9
  };

  void LED(uint8_t input)
  {
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
 800050a:	4664      	mov	r4, ip
 800050c:	f8c7 c000 	str.w	ip, [r7]
	  pulse = 255;
 8000510:	23ff      	movs	r3, #255	@ 0xff
 8000512:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
	  for(uint8_t j=0; j<7; j++)
 8000516:	2300      	movs	r3, #0
 8000518:	73fb      	strb	r3, [r7, #15]
 800051a:	e013      	b.n	8000544 <LED.0+0x44>
	  	{
	  	  HAL_GPIO_WritePin(GPIOA, ports[j], data_table[input][j]);
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8000522:	79fa      	ldrb	r2, [r7, #7]
 8000524:	7bf9      	ldrb	r1, [r7, #15]
 8000526:	4613      	mov	r3, r2
 8000528:	00db      	lsls	r3, r3, #3
 800052a:	1a9b      	subs	r3, r3, r2
 800052c:	4423      	add	r3, r4
 800052e:	440b      	add	r3, r1
 8000530:	330e      	adds	r3, #14
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	461a      	mov	r2, r3
 8000536:	4601      	mov	r1, r0
 8000538:	4810      	ldr	r0, [pc, #64]	@ (800057c <LED.0+0x7c>)
 800053a:	f000 fd39 	bl	8000fb0 <HAL_GPIO_WritePin>
	  for(uint8_t j=0; j<7; j++)
 800053e:	7bfb      	ldrb	r3, [r7, #15]
 8000540:	3301      	adds	r3, #1
 8000542:	73fb      	strb	r3, [r7, #15]
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b06      	cmp	r3, #6
 8000548:	d9e8      	bls.n	800051c <LED.0+0x1c>
	  	}
	  while(pulse>0)
 800054a:	e00d      	b.n	8000568 <LED.0+0x68>
	  	{
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <LED.0+0x80>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8000554:	635a      	str	r2, [r3, #52]	@ 0x34
	  	  pulse-=1;
 8000556:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800055a:	3b01      	subs	r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
	  	  HAL_Delay(10);
 8000562:	200a      	movs	r0, #10
 8000564:	f000 fa96 	bl	8000a94 <HAL_Delay>
	  while(pulse>0)
 8000568:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 800056c:	2b00      	cmp	r3, #0
 800056e:	d1ed      	bne.n	800054c <LED.0+0x4c>
	  	}

  }
 8000570:	bf00      	nop
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bd90      	pop	{r4, r7, pc}
 800057a:	bf00      	nop
 800057c:	40020000 	.word	0x40020000
 8000580:	20000028 	.word	0x20000028

08000584 <main>:
{
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b099      	sub	sp, #100	@ 0x64
 8000588:	af00      	add	r7, sp, #0
int main(void)
 800058a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800058e:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_Init();
 8000590:	f000 fa0e 	bl	80009b0 <HAL_Init>
  SystemClock_Config();
 8000594:	f000 f830 	bl	80005f8 <SystemClock_Config>
  MX_GPIO_Init();
 8000598:	f000 f8e6 	bl	8000768 <MX_GPIO_Init>
  MX_TIM2_Init();
 800059c:	f000 f88c 	bl	80006b8 <MX_TIM2_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005a0:	2100      	movs	r1, #0
 80005a2:	4812      	ldr	r0, [pc, #72]	@ (80005ec <main+0x68>)
 80005a4:	f001 f992 	bl	80018cc <HAL_TIM_PWM_Start>
  uint16_t ports[] = { GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7 };
 80005a8:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <main+0x6c>)
 80005aa:	463c      	mov	r4, r7
 80005ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ae:	c407      	stmia	r4!, {r0, r1, r2}
 80005b0:	8023      	strh	r3, [r4, #0]
  uint8_t data_table[10][7] = {
 80005b2:	4a10      	ldr	r2, [pc, #64]	@ (80005f4 <main+0x70>)
 80005b4:	f107 030e 	add.w	r3, r7, #14
 80005b8:	4611      	mov	r1, r2
 80005ba:	2246      	movs	r2, #70	@ 0x46
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fdcf 	bl	8002160 <memcpy>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  for(uint8_t k=0; k<10; k++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80005c8:	e00b      	b.n	80005e2 <main+0x5e>
	  {
		  LED(k);
 80005ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80005ce:	463a      	mov	r2, r7
 80005d0:	4694      	mov	ip, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff ff94 	bl	8000500 <LED.0>
	  for(uint8_t k=0; k<10; k++)
 80005d8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80005dc:	3301      	adds	r3, #1
 80005de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80005e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80005e6:	2b09      	cmp	r3, #9
 80005e8:	d9ef      	bls.n	80005ca <main+0x46>
 80005ea:	e7ea      	b.n	80005c2 <main+0x3e>
 80005ec:	20000028 	.word	0x20000028
 80005f0:	08002194 	.word	0x08002194
 80005f4:	080021a4 	.word	0x080021a4

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fd7e 	bl	8002108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b23      	ldr	r3, [pc, #140]	@ (80006b0 <SystemClock_Config+0xb8>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a22      	ldr	r2, [pc, #136]	@ (80006b0 <SystemClock_Config+0xb8>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b20      	ldr	r3, [pc, #128]	@ (80006b0 <SystemClock_Config+0xb8>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <SystemClock_Config+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a1b      	ldr	r2, [pc, #108]	@ (80006b4 <SystemClock_Config+0xbc>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b19      	ldr	r3, [pc, #100]	@ (80006b4 <SystemClock_Config+0xbc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000664:	2300      	movs	r3, #0
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fcb9 	bl	8000fe4 <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000678:	f000 f8a8 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067c:	230f      	movs	r3, #15
 800067e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f000 ff1c 	bl	80014d4 <HAL_RCC_ClockConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006a2:	f000 f893 	bl	80007cc <Error_Handler>
  }
}
 80006a6:	bf00      	nop
 80006a8:	3750      	adds	r7, #80	@ 0x50
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
 80006d6:	615a      	str	r2, [r3, #20]
 80006d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <MX_TIM2_Init+0xac>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_TIM2_Init+0xac>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_TIM2_Init+0xac>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_TIM2_Init+0xac>)
 80006f0:	22ff      	movs	r2, #255	@ 0xff
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_TIM2_Init+0xac>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_TIM2_Init+0xac>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000700:	4818      	ldr	r0, [pc, #96]	@ (8000764 <MX_TIM2_Init+0xac>)
 8000702:	f001 f893 	bl	800182c <HAL_TIM_PWM_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800070c:	f000 f85e 	bl	80007cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000714:	2300      	movs	r3, #0
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000718:	f107 0320 	add.w	r3, r7, #32
 800071c:	4619      	mov	r1, r3
 800071e:	4811      	ldr	r0, [pc, #68]	@ (8000764 <MX_TIM2_Init+0xac>)
 8000720:	f001 fc84 	bl	800202c <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800072a:	f000 f84f 	bl	80007cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800072e:	2360      	movs	r3, #96	@ 0x60
 8000730:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000736:	2302      	movs	r3, #2
 8000738:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	2200      	movs	r2, #0
 8000742:	4619      	mov	r1, r3
 8000744:	4807      	ldr	r0, [pc, #28]	@ (8000764 <MX_TIM2_Init+0xac>)
 8000746:	f001 f971 	bl	8001a2c <HAL_TIM_PWM_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000750:	f000 f83c 	bl	80007cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000754:	4803      	ldr	r0, [pc, #12]	@ (8000764 <MX_TIM2_Init+0xac>)
 8000756:	f000 f887 	bl	8000868 <HAL_TIM_MspPostInit>

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20000028 	.word	0x20000028

08000768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	603b      	str	r3, [r7, #0]
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_GPIO_Init+0x5c>)
 8000782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000784:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <MX_GPIO_Init+0x5c>)
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	6313      	str	r3, [r2, #48]	@ 0x30
 800078c:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_GPIO_Init+0x5c>)
 800078e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000798:	2200      	movs	r2, #0
 800079a:	21fe      	movs	r1, #254	@ 0xfe
 800079c:	480a      	ldr	r0, [pc, #40]	@ (80007c8 <MX_GPIO_Init+0x60>)
 800079e:	f000 fc07 	bl	8000fb0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80007a2:	23fe      	movs	r3, #254	@ 0xfe
 80007a4:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	4804      	ldr	r0, [pc, #16]	@ (80007c8 <MX_GPIO_Init+0x60>)
 80007b8:	f000 fa76 	bl	8000ca8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40020000 	.word	0x40020000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <Error_Handler+0x8>

080007d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	@ (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	@ (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	@ 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	@ (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000838:	d10d      	bne.n	8000856 <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b09      	ldr	r3, [pc, #36]	@ (8000864 <HAL_TIM_PWM_MspInit+0x3c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	@ (8000864 <HAL_TIM_PWM_MspInit+0x3c>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6413      	str	r3, [r2, #64]	@ 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	@ (8000864 <HAL_TIM_PWM_MspInit+0x3c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000856:	bf00      	nop
 8000858:	3714      	adds	r7, #20
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023800 	.word	0x40023800

08000868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b088      	sub	sp, #32
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 030c 	add.w	r3, r7, #12
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000888:	d11d      	bne.n	80008c6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <HAL_TIM_MspPostInit+0x68>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <HAL_TIM_MspPostInit+0x68>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	@ 0x30
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <HAL_TIM_MspPostInit+0x68>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60bb      	str	r3, [r7, #8]
 80008a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008a6:	2301      	movs	r3, #1
 80008a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008b6:	2301      	movs	r3, #1
 80008b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4619      	mov	r1, r3
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <HAL_TIM_MspPostInit+0x6c>)
 80008c2:	f000 f9f1 	bl	8000ca8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80008c6:	bf00      	nop
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40020000 	.word	0x40020000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <NMI_Handler+0x4>

080008e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <HardFault_Handler+0x4>

080008e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <MemManage_Handler+0x4>

080008f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <UsageFault_Handler+0x4>

08000900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092e:	f000 f891 	bl	8000a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
	...

08000938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000994 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000960:	f7ff ffea 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	@ (800099c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	@ (80009a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f001 fbc5 	bl	8002118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098e:	f7ff fdf9 	bl	8000584 <main>
  bx  lr    
 8000992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000994:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a0:	0800220c 	.word	0x0800220c
  ldr r2, =_sbss
 80009a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a8:	20000074 	.word	0x20000074

080009ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b4:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0d      	ldr	r2, [pc, #52]	@ (80009f0 <HAL_Init+0x40>)
 80009ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c0:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <HAL_Init+0x40>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <HAL_Init+0x40>)
 80009c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009cc:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a07      	ldr	r2, [pc, #28]	@ (80009f0 <HAL_Init+0x40>)
 80009d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f931 	bl	8000c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f808 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e4:	f7ff fef8 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e8:	2300      	movs	r3, #0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023c00 	.word	0x40023c00

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x54>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <HAL_InitTick+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	4619      	mov	r1, r3
 8000a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f93b 	bl	8000c8e <HAL_SYSTICK_Config>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	e00e      	b.n	8000a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	2b0f      	cmp	r3, #15
 8000a26:	d80a      	bhi.n	8000a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	6879      	ldr	r1, [r7, #4]
 8000a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a30:	f000 f911 	bl	8000c56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_InitTick+0x5c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000008 	.word	0x20000008
 8000a50:	20000004 	.word	0x20000004

08000a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4413      	add	r3, r2
 8000a64:	4a04      	ldr	r2, [pc, #16]	@ (8000a78 <HAL_IncTick+0x24>)
 8000a66:	6013      	str	r3, [r2, #0]
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	20000008 	.word	0x20000008
 8000a78:	20000070 	.word	0x20000070

08000a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a80:	4b03      	ldr	r3, [pc, #12]	@ (8000a90 <HAL_GetTick+0x14>)
 8000a82:	681b      	ldr	r3, [r3, #0]
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000070 	.word	0x20000070

08000a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a9c:	f7ff ffee 	bl	8000a7c <HAL_GetTick>
 8000aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aac:	d005      	beq.n	8000aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <HAL_Delay+0x44>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000aba:	bf00      	nop
 8000abc:	f7ff ffde 	bl	8000a7c <HAL_GetTick>
 8000ac0:	4602      	mov	r2, r0
 8000ac2:	68bb      	ldr	r3, [r7, #8]
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d8f7      	bhi.n	8000abc <HAL_Delay+0x28>
  {
  }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008

08000adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b085      	sub	sp, #20
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	4b0c      	ldr	r3, [pc, #48]	@ (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	68ba      	ldr	r2, [r7, #8]
 8000af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af8:	4013      	ands	r3, r2
 8000afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0e:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <__NVIC_SetPriorityGrouping+0x44>)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	60d3      	str	r3, [r2, #12]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b28:	4b04      	ldr	r3, [pc, #16]	@ (8000b3c <__NVIC_GetPriorityGrouping+0x18>)
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	0a1b      	lsrs	r3, r3, #8
 8000b2e:	f003 0307 	and.w	r3, r3, #7
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	6039      	str	r1, [r7, #0]
 8000b4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	db0a      	blt.n	8000b6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	490c      	ldr	r1, [pc, #48]	@ (8000b8c <__NVIC_SetPriority+0x4c>)
 8000b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5e:	0112      	lsls	r2, r2, #4
 8000b60:	b2d2      	uxtb	r2, r2
 8000b62:	440b      	add	r3, r1
 8000b64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b68:	e00a      	b.n	8000b80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	b2da      	uxtb	r2, r3
 8000b6e:	4908      	ldr	r1, [pc, #32]	@ (8000b90 <__NVIC_SetPriority+0x50>)
 8000b70:	79fb      	ldrb	r3, [r7, #7]
 8000b72:	f003 030f 	and.w	r3, r3, #15
 8000b76:	3b04      	subs	r3, #4
 8000b78:	0112      	lsls	r2, r2, #4
 8000b7a:	b2d2      	uxtb	r2, r2
 8000b7c:	440b      	add	r3, r1
 8000b7e:	761a      	strb	r2, [r3, #24]
}
 8000b80:	bf00      	nop
 8000b82:	370c      	adds	r7, #12
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000e100 	.word	0xe000e100
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b089      	sub	sp, #36	@ 0x24
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	f1c3 0307 	rsb	r3, r3, #7
 8000bae:	2b04      	cmp	r3, #4
 8000bb0:	bf28      	it	cs
 8000bb2:	2304      	movcs	r3, #4
 8000bb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3304      	adds	r3, #4
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d902      	bls.n	8000bc4 <NVIC_EncodePriority+0x30>
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	3b03      	subs	r3, #3
 8000bc2:	e000      	b.n	8000bc6 <NVIC_EncodePriority+0x32>
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd2:	43da      	mvns	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bdc:	f04f 31ff 	mov.w	r1, #4294967295
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	43d9      	mvns	r1, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	4313      	orrs	r3, r2
         );
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3724      	adds	r7, #36	@ 0x24
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c0c:	d301      	bcc.n	8000c12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e00f      	b.n	8000c32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <SysTick_Config+0x40>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c1a:	210f      	movs	r1, #15
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	f7ff ff8e 	bl	8000b40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c24:	4b05      	ldr	r3, [pc, #20]	@ (8000c3c <SysTick_Config+0x40>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c2a:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <SysTick_Config+0x40>)
 8000c2c:	2207      	movs	r2, #7
 8000c2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c30:	2300      	movs	r3, #0
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	e000e010 	.word	0xe000e010

08000c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f7ff ff47 	bl	8000adc <__NVIC_SetPriorityGrouping>
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b086      	sub	sp, #24
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	60b9      	str	r1, [r7, #8]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c68:	f7ff ff5c 	bl	8000b24 <__NVIC_GetPriorityGrouping>
 8000c6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	68b9      	ldr	r1, [r7, #8]
 8000c72:	6978      	ldr	r0, [r7, #20]
 8000c74:	f7ff ff8e 	bl	8000b94 <NVIC_EncodePriority>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7e:	4611      	mov	r1, r2
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff5d 	bl	8000b40 <__NVIC_SetPriority>
}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffb0 	bl	8000bfc <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
 8000cc2:	e159      	b.n	8000f78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	f040 8148 	bne.w	8000f72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0303 	and.w	r3, r3, #3
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d005      	beq.n	8000cfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf6:	2b02      	cmp	r3, #2
 8000cf8:	d130      	bne.n	8000d5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	69ba      	ldr	r2, [r7, #24]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	091b      	lsrs	r3, r3, #4
 8000d46:	f003 0201 	and.w	r2, r3, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	f003 0303 	and.w	r3, r3, #3
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d017      	beq.n	8000d98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	2203      	movs	r2, #3
 8000d74:	fa02 f303 	lsl.w	r3, r2, r3
 8000d78:	43db      	mvns	r3, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	689a      	ldr	r2, [r3, #8]
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d123      	bne.n	8000dec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	08da      	lsrs	r2, r3, #3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3208      	adds	r2, #8
 8000dac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	220f      	movs	r2, #15
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	691a      	ldr	r2, [r3, #16]
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	f003 0307 	and.w	r3, r3, #7
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	08da      	lsrs	r2, r3, #3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3208      	adds	r2, #8
 8000de6:	69b9      	ldr	r1, [r7, #24]
 8000de8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0203 	and.w	r2, r3, #3
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 80a2 	beq.w	8000f72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b57      	ldr	r3, [pc, #348]	@ (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e36:	4a56      	ldr	r2, [pc, #344]	@ (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e3e:	4b54      	ldr	r3, [pc, #336]	@ (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e4a:	4a52      	ldr	r2, [pc, #328]	@ (8000f94 <HAL_GPIO_Init+0x2ec>)
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	089b      	lsrs	r3, r3, #2
 8000e50:	3302      	adds	r3, #2
 8000e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	220f      	movs	r2, #15
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a49      	ldr	r2, [pc, #292]	@ (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d019      	beq.n	8000eaa <HAL_GPIO_Init+0x202>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a48      	ldr	r2, [pc, #288]	@ (8000f9c <HAL_GPIO_Init+0x2f4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0x1fe>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a47      	ldr	r2, [pc, #284]	@ (8000fa0 <HAL_GPIO_Init+0x2f8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d00d      	beq.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a46      	ldr	r2, [pc, #280]	@ (8000fa4 <HAL_GPIO_Init+0x2fc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x1f6>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a45      	ldr	r2, [pc, #276]	@ (8000fa8 <HAL_GPIO_Init+0x300>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_GPIO_Init+0x1f2>
 8000e96:	2304      	movs	r3, #4
 8000e98:	e008      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000e9a:	2307      	movs	r3, #7
 8000e9c:	e006      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e004      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	e002      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e000      	b.n	8000eac <HAL_GPIO_Init+0x204>
 8000eaa:	2300      	movs	r3, #0
 8000eac:	69fa      	ldr	r2, [r7, #28]
 8000eae:	f002 0203 	and.w	r2, r2, #3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	4093      	lsls	r3, r2
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ebc:	4935      	ldr	r1, [pc, #212]	@ (8000f94 <HAL_GPIO_Init+0x2ec>)
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	089b      	lsrs	r3, r3, #2
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eca:	4b38      	ldr	r3, [pc, #224]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d003      	beq.n	8000eee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eee:	4a2f      	ldr	r2, [pc, #188]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000ef0:	69bb      	ldr	r3, [r7, #24]
 8000ef2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ef4:	4b2d      	ldr	r3, [pc, #180]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	69ba      	ldr	r2, [r7, #24]
 8000f00:	4013      	ands	r3, r2
 8000f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	693b      	ldr	r3, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f18:	4a24      	ldr	r2, [pc, #144]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f42:	4a1a      	ldr	r2, [pc, #104]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fac <HAL_GPIO_Init+0x304>)
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b0f      	cmp	r3, #15
 8000f7c:	f67f aea2 	bls.w	8000cc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40013800 	.word	0x40013800
 8000f98:	40020000 	.word	0x40020000
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	40021000 	.word	0x40021000
 8000fac:	40013c00 	.word	0x40013c00

08000fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	807b      	strh	r3, [r7, #2]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fc0:	787b      	ldrb	r3, [r7, #1]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fcc:	e003      	b.n	8000fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fce:	887b      	ldrh	r3, [r7, #2]
 8000fd0:	041a      	lsls	r2, r3, #16
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	619a      	str	r2, [r3, #24]
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d101      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e267      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d075      	beq.n	80010ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001002:	4b88      	ldr	r3, [pc, #544]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b04      	cmp	r3, #4
 800100c:	d00c      	beq.n	8001028 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800100e:	4b85      	ldr	r3, [pc, #532]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001016:	2b08      	cmp	r3, #8
 8001018:	d112      	bne.n	8001040 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800101a:	4b82      	ldr	r3, [pc, #520]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001026:	d10b      	bne.n	8001040 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001028:	4b7e      	ldr	r3, [pc, #504]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001030:	2b00      	cmp	r3, #0
 8001032:	d05b      	beq.n	80010ec <HAL_RCC_OscConfig+0x108>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d157      	bne.n	80010ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e242      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001048:	d106      	bne.n	8001058 <HAL_RCC_OscConfig+0x74>
 800104a:	4b76      	ldr	r3, [pc, #472]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a75      	ldr	r2, [pc, #468]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	e01d      	b.n	8001094 <HAL_RCC_OscConfig+0xb0>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001060:	d10c      	bne.n	800107c <HAL_RCC_OscConfig+0x98>
 8001062:	4b70      	ldr	r3, [pc, #448]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a6f      	ldr	r2, [pc, #444]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	4b6d      	ldr	r3, [pc, #436]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a6c      	ldr	r2, [pc, #432]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001078:	6013      	str	r3, [r2, #0]
 800107a:	e00b      	b.n	8001094 <HAL_RCC_OscConfig+0xb0>
 800107c:	4b69      	ldr	r3, [pc, #420]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a68      	ldr	r2, [pc, #416]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	4b66      	ldr	r3, [pc, #408]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a65      	ldr	r2, [pc, #404]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 800108e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109c:	f7ff fcee 	bl	8000a7c <HAL_GetTick>
 80010a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	e008      	b.n	80010b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a4:	f7ff fcea 	bl	8000a7c <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	2b64      	cmp	r3, #100	@ 0x64
 80010b0:	d901      	bls.n	80010b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80010b2:	2303      	movs	r3, #3
 80010b4:	e207      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d0f0      	beq.n	80010a4 <HAL_RCC_OscConfig+0xc0>
 80010c2:	e014      	b.n	80010ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c4:	f7ff fcda 	bl	8000a7c <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010cc:	f7ff fcd6 	bl	8000a7c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b64      	cmp	r3, #100	@ 0x64
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e1f3      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010de:	4b51      	ldr	r3, [pc, #324]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d1f0      	bne.n	80010cc <HAL_RCC_OscConfig+0xe8>
 80010ea:	e000      	b.n	80010ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d063      	beq.n	80011c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80010fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b00      	cmp	r3, #0
 8001104:	d00b      	beq.n	800111e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800110e:	2b08      	cmp	r3, #8
 8001110:	d11c      	bne.n	800114c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001112:	4b44      	ldr	r3, [pc, #272]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d116      	bne.n	800114c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800111e:	4b41      	ldr	r3, [pc, #260]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d005      	beq.n	8001136 <HAL_RCC_OscConfig+0x152>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d001      	beq.n	8001136 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e1c7      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001136:	4b3b      	ldr	r3, [pc, #236]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	4937      	ldr	r1, [pc, #220]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001146:	4313      	orrs	r3, r2
 8001148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114a:	e03a      	b.n	80011c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d020      	beq.n	8001196 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001154:	4b34      	ldr	r3, [pc, #208]	@ (8001228 <HAL_RCC_OscConfig+0x244>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800115a:	f7ff fc8f 	bl	8000a7c <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001162:	f7ff fc8b 	bl	8000a7c <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e1a8      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001174:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001180:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	691b      	ldr	r3, [r3, #16]
 800118c:	00db      	lsls	r3, r3, #3
 800118e:	4925      	ldr	r1, [pc, #148]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 8001190:	4313      	orrs	r3, r2
 8001192:	600b      	str	r3, [r1, #0]
 8001194:	e015      	b.n	80011c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <HAL_RCC_OscConfig+0x244>)
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800119c:	f7ff fc6e 	bl	8000a7c <HAL_GetTick>
 80011a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011a2:	e008      	b.n	80011b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011a4:	f7ff fc6a 	bl	8000a7c <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d901      	bls.n	80011b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80011b2:	2303      	movs	r3, #3
 80011b4:	e187      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d1f0      	bne.n	80011a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d036      	beq.n	800123c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	695b      	ldr	r3, [r3, #20]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d016      	beq.n	8001204 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011d6:	4b15      	ldr	r3, [pc, #84]	@ (800122c <HAL_RCC_OscConfig+0x248>)
 80011d8:	2201      	movs	r2, #1
 80011da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011dc:	f7ff fc4e 	bl	8000a7c <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011e2:	e008      	b.n	80011f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e4:	f7ff fc4a 	bl	8000a7c <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d901      	bls.n	80011f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e167      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <HAL_RCC_OscConfig+0x240>)
 80011f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d0f0      	beq.n	80011e4 <HAL_RCC_OscConfig+0x200>
 8001202:	e01b      	b.n	800123c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001204:	4b09      	ldr	r3, [pc, #36]	@ (800122c <HAL_RCC_OscConfig+0x248>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800120a:	f7ff fc37 	bl	8000a7c <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001210:	e00e      	b.n	8001230 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001212:	f7ff fc33 	bl	8000a7c <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d907      	bls.n	8001230 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e150      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
 8001224:	40023800 	.word	0x40023800
 8001228:	42470000 	.word	0x42470000
 800122c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001230:	4b88      	ldr	r3, [pc, #544]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1ea      	bne.n	8001212 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	f000 8097 	beq.w	8001378 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800124e:	4b81      	ldr	r3, [pc, #516]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10f      	bne.n	800127a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	4b7d      	ldr	r3, [pc, #500]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a7c      	ldr	r2, [pc, #496]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b7a      	ldr	r3, [pc, #488]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800127a:	4b77      	ldr	r3, [pc, #476]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001286:	4b74      	ldr	r3, [pc, #464]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a73      	ldr	r2, [pc, #460]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff fbf3 	bl	8000a7c <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129a:	f7ff fbef 	bl	8000a7c <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e10c      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ac:	4b6a      	ldr	r3, [pc, #424]	@ (8001458 <HAL_RCC_OscConfig+0x474>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x2ea>
 80012c0:	4b64      	ldr	r3, [pc, #400]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c4:	4a63      	ldr	r2, [pc, #396]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80012cc:	e01c      	b.n	8001308 <HAL_RCC_OscConfig+0x324>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b05      	cmp	r3, #5
 80012d4:	d10c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x30c>
 80012d6:	4b5f      	ldr	r3, [pc, #380]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012da:	4a5e      	ldr	r2, [pc, #376]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0x324>
 80012f0:	4b58      	ldr	r3, [pc, #352]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f4:	4a57      	ldr	r2, [pc, #348]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012f6:	f023 0301 	bic.w	r3, r3, #1
 80012fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80012fc:	4b55      	ldr	r3, [pc, #340]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80012fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001300:	4a54      	ldr	r2, [pc, #336]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001302:	f023 0304 	bic.w	r3, r3, #4
 8001306:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d015      	beq.n	800133c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001310:	f7ff fbb4 	bl	8000a7c <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001316:	e00a      	b.n	800132e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001318:	f7ff fbb0 	bl	8000a7c <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e0cb      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800132e:	4b49      	ldr	r3, [pc, #292]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0ee      	beq.n	8001318 <HAL_RCC_OscConfig+0x334>
 800133a:	e014      	b.n	8001366 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fb9e 	bl	8000a7c <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001342:	e00a      	b.n	800135a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001344:	f7ff fb9a 	bl	8000a7c <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001352:	4293      	cmp	r3, r2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e0b5      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800135a:	4b3e      	ldr	r3, [pc, #248]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1ee      	bne.n	8001344 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001366:	7dfb      	ldrb	r3, [r7, #23]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d105      	bne.n	8001378 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800136c:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001370:	4a38      	ldr	r2, [pc, #224]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80a1 	beq.w	80014c4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001382:	4b34      	ldr	r3, [pc, #208]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	d05c      	beq.n	8001448 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b02      	cmp	r3, #2
 8001394:	d141      	bne.n	800141a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b31      	ldr	r3, [pc, #196]	@ (800145c <HAL_RCC_OscConfig+0x478>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fb6e 	bl	8000a7c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fb6a 	bl	8000a7c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e087      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	4b27      	ldr	r3, [pc, #156]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	69da      	ldr	r2, [r3, #28]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d8:	085b      	lsrs	r3, r3, #1
 80013da:	3b01      	subs	r3, #1
 80013dc:	041b      	lsls	r3, r3, #16
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013e4:	061b      	lsls	r3, r3, #24
 80013e6:	491b      	ldr	r1, [pc, #108]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <HAL_RCC_OscConfig+0x478>)
 80013ee:	2201      	movs	r2, #1
 80013f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fb43 	bl	8000a7c <HAL_GetTick>
 80013f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013f8:	e008      	b.n	800140c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fa:	f7ff fb3f 	bl	8000a7c <HAL_GetTick>
 80013fe:	4602      	mov	r2, r0
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b02      	cmp	r3, #2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e05c      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0f0      	beq.n	80013fa <HAL_RCC_OscConfig+0x416>
 8001418:	e054      	b.n	80014c4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_RCC_OscConfig+0x478>)
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb2c 	bl	8000a7c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001428:	f7ff fb28 	bl	8000a7c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e045      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <HAL_RCC_OscConfig+0x470>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x444>
 8001446:	e03d      	b.n	80014c4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d107      	bne.n	8001460 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e038      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
 8001454:	40023800 	.word	0x40023800
 8001458:	40007000 	.word	0x40007000
 800145c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <HAL_RCC_OscConfig+0x4ec>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d028      	beq.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d121      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001486:	429a      	cmp	r2, r3
 8001488:	d11a      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001490:	4013      	ands	r3, r2
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001496:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001498:	4293      	cmp	r3, r2
 800149a:	d111      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a6:	085b      	lsrs	r3, r3, #1
 80014a8:	3b01      	subs	r3, #1
 80014aa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d107      	bne.n	80014c0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80014bc:	429a      	cmp	r2, r3
 80014be:	d001      	beq.n	80014c4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800

080014d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0cc      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014e8:	4b68      	ldr	r3, [pc, #416]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d90c      	bls.n	8001510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	4b65      	ldr	r3, [pc, #404]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fe:	4b63      	ldr	r3, [pc, #396]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	429a      	cmp	r2, r3
 800150a:	d001      	beq.n	8001510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e0b8      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d005      	beq.n	8001534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001528:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	4a58      	ldr	r2, [pc, #352]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001532:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001540:	4b53      	ldr	r3, [pc, #332]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a52      	ldr	r2, [pc, #328]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800154a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800154c:	4b50      	ldr	r3, [pc, #320]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	494d      	ldr	r1, [pc, #308]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	4313      	orrs	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	2b00      	cmp	r3, #0
 8001568:	d044      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d107      	bne.n	8001582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e07f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b02      	cmp	r3, #2
 8001588:	d003      	beq.n	8001592 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	2b03      	cmp	r3, #3
 8001590:	d107      	bne.n	80015a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	4b3f      	ldr	r3, [pc, #252]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e06f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d101      	bne.n	80015b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e067      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015b2:	4b37      	ldr	r3, [pc, #220]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 0203 	bic.w	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4934      	ldr	r1, [pc, #208]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c4:	f7ff fa5a 	bl	8000a7c <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ca:	e00a      	b.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015cc:	f7ff fa56 	bl	8000a7c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e04f      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 020c 	and.w	r2, r3, #12
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d1eb      	bne.n	80015cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015f4:	4b25      	ldr	r3, [pc, #148]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d20c      	bcs.n	800161c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b22      	ldr	r3, [pc, #136]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b20      	ldr	r3, [pc, #128]	@ (800168c <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e032      	b.n	8001682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	d008      	beq.n	800163a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001628:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	4916      	ldr	r1, [pc, #88]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	4313      	orrs	r3, r2
 8001638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0308 	and.w	r3, r3, #8
 8001642:	2b00      	cmp	r3, #0
 8001644:	d009      	beq.n	800165a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	490e      	ldr	r1, [pc, #56]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	4313      	orrs	r3, r2
 8001658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800165a:	f000 f821 	bl	80016a0 <HAL_RCC_GetSysClockFreq>
 800165e:	4602      	mov	r2, r0
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	091b      	lsrs	r3, r3, #4
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	490a      	ldr	r1, [pc, #40]	@ (8001694 <HAL_RCC_ClockConfig+0x1c0>)
 800166c:	5ccb      	ldrb	r3, [r1, r3]
 800166e:	fa22 f303 	lsr.w	r3, r2, r3
 8001672:	4a09      	ldr	r2, [pc, #36]	@ (8001698 <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <HAL_RCC_ClockConfig+0x1c8>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff f9ba 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40023c00 	.word	0x40023c00
 8001690:	40023800 	.word	0x40023800
 8001694:	080021ec 	.word	0x080021ec
 8001698:	20000000 	.word	0x20000000
 800169c:	20000004 	.word	0x20000004

080016a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a4:	b090      	sub	sp, #64	@ 0x40
 80016a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80016b0:	2300      	movs	r3, #0
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016b8:	4b59      	ldr	r3, [pc, #356]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d00d      	beq.n	80016e0 <HAL_RCC_GetSysClockFreq+0x40>
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	f200 80a1 	bhi.w	800180c <HAL_RCC_GetSysClockFreq+0x16c>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_RCC_GetSysClockFreq+0x34>
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d003      	beq.n	80016da <HAL_RCC_GetSysClockFreq+0x3a>
 80016d2:	e09b      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x184>)
 80016d6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016d8:	e09b      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016da:	4b53      	ldr	r3, [pc, #332]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x188>)
 80016dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016de:	e098      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x180>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016ea:	4b4d      	ldr	r3, [pc, #308]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d028      	beq.n	8001748 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x180>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	099b      	lsrs	r3, r3, #6
 80016fc:	2200      	movs	r2, #0
 80016fe:	623b      	str	r3, [r7, #32]
 8001700:	627a      	str	r2, [r7, #36]	@ 0x24
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001708:	2100      	movs	r1, #0
 800170a:	4b47      	ldr	r3, [pc, #284]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x188>)
 800170c:	fb03 f201 	mul.w	r2, r3, r1
 8001710:	2300      	movs	r3, #0
 8001712:	fb00 f303 	mul.w	r3, r0, r3
 8001716:	4413      	add	r3, r2
 8001718:	4a43      	ldr	r2, [pc, #268]	@ (8001828 <HAL_RCC_GetSysClockFreq+0x188>)
 800171a:	fba0 1202 	umull	r1, r2, r0, r2
 800171e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001720:	460a      	mov	r2, r1
 8001722:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001726:	4413      	add	r3, r2
 8001728:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800172a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800172c:	2200      	movs	r2, #0
 800172e:	61bb      	str	r3, [r7, #24]
 8001730:	61fa      	str	r2, [r7, #28]
 8001732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001736:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800173a:	f7fe fd4b 	bl	80001d4 <__aeabi_uldivmod>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	4613      	mov	r3, r2
 8001744:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001746:	e053      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001748:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x180>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	099b      	lsrs	r3, r3, #6
 800174e:	2200      	movs	r2, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	617a      	str	r2, [r7, #20]
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800175a:	f04f 0b00 	mov.w	fp, #0
 800175e:	4652      	mov	r2, sl
 8001760:	465b      	mov	r3, fp
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	ebb2 080a 	subs.w	r8, r2, sl
 800177a:	eb63 090b 	sbc.w	r9, r3, fp
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800178a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800178e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001792:	ebb2 0408 	subs.w	r4, r2, r8
 8001796:	eb63 0509 	sbc.w	r5, r3, r9
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	f04f 0300 	mov.w	r3, #0
 80017a2:	00eb      	lsls	r3, r5, #3
 80017a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a8:	00e2      	lsls	r2, r4, #3
 80017aa:	4614      	mov	r4, r2
 80017ac:	461d      	mov	r5, r3
 80017ae:	eb14 030a 	adds.w	r3, r4, sl
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	eb45 030b 	adc.w	r3, r5, fp
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c6:	4629      	mov	r1, r5
 80017c8:	028b      	lsls	r3, r1, #10
 80017ca:	4621      	mov	r1, r4
 80017cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d0:	4621      	mov	r1, r4
 80017d2:	028a      	lsls	r2, r1, #10
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017da:	2200      	movs	r2, #0
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	60fa      	str	r2, [r7, #12]
 80017e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017e4:	f7fe fcf6 	bl	80001d4 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_RCC_GetSysClockFreq+0x180>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001800:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800180a:	e002      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <HAL_RCC_GetSysClockFreq+0x184>)
 800180e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001814:	4618      	mov	r0, r3
 8001816:	3740      	adds	r7, #64	@ 0x40
 8001818:	46bd      	mov	sp, r7
 800181a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	00f42400 	.word	0x00f42400
 8001828:	017d7840 	.word	0x017d7840

0800182c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e041      	b.n	80018c2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d106      	bne.n	8001858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f7fe ffe8 	bl	8000828 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2202      	movs	r2, #2
 800185c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3304      	adds	r3, #4
 8001868:	4619      	mov	r1, r3
 800186a:	4610      	mov	r0, r2
 800186c:	f000 f9a0 	bl	8001bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d109      	bne.n	80018f0 <HAL_TIM_PWM_Start+0x24>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	e022      	b.n	8001936 <HAL_TIM_PWM_Start+0x6a>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d109      	bne.n	800190a <HAL_TIM_PWM_Start+0x3e>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b01      	cmp	r3, #1
 8001900:	bf14      	ite	ne
 8001902:	2301      	movne	r3, #1
 8001904:	2300      	moveq	r3, #0
 8001906:	b2db      	uxtb	r3, r3
 8001908:	e015      	b.n	8001936 <HAL_TIM_PWM_Start+0x6a>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	2b08      	cmp	r3, #8
 800190e:	d109      	bne.n	8001924 <HAL_TIM_PWM_Start+0x58>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	e008      	b.n	8001936 <HAL_TIM_PWM_Start+0x6a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	bf14      	ite	ne
 8001930:	2301      	movne	r3, #1
 8001932:	2300      	moveq	r3, #0
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e068      	b.n	8001a10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d104      	bne.n	800194e <HAL_TIM_PWM_Start+0x82>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2202      	movs	r2, #2
 8001948:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800194c:	e013      	b.n	8001976 <HAL_TIM_PWM_Start+0xaa>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b04      	cmp	r3, #4
 8001952:	d104      	bne.n	800195e <HAL_TIM_PWM_Start+0x92>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800195c:	e00b      	b.n	8001976 <HAL_TIM_PWM_Start+0xaa>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b08      	cmp	r3, #8
 8001962:	d104      	bne.n	800196e <HAL_TIM_PWM_Start+0xa2>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800196c:	e003      	b.n	8001976 <HAL_TIM_PWM_Start+0xaa>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2202      	movs	r2, #2
 8001972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	6839      	ldr	r1, [r7, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 fb2e 	bl	8001fe0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a23      	ldr	r2, [pc, #140]	@ (8001a18 <HAL_TIM_PWM_Start+0x14c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d107      	bne.n	800199e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800199c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a18 <HAL_TIM_PWM_Start+0x14c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d018      	beq.n	80019da <HAL_TIM_PWM_Start+0x10e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b0:	d013      	beq.n	80019da <HAL_TIM_PWM_Start+0x10e>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a19      	ldr	r2, [pc, #100]	@ (8001a1c <HAL_TIM_PWM_Start+0x150>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00e      	beq.n	80019da <HAL_TIM_PWM_Start+0x10e>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a17      	ldr	r2, [pc, #92]	@ (8001a20 <HAL_TIM_PWM_Start+0x154>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d009      	beq.n	80019da <HAL_TIM_PWM_Start+0x10e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a16      	ldr	r2, [pc, #88]	@ (8001a24 <HAL_TIM_PWM_Start+0x158>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d004      	beq.n	80019da <HAL_TIM_PWM_Start+0x10e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <HAL_TIM_PWM_Start+0x15c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d111      	bne.n	80019fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0307 	and.w	r3, r3, #7
 80019e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2b06      	cmp	r3, #6
 80019ea:	d010      	beq.n	8001a0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019fc:	e007      	b.n	8001a0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3710      	adds	r7, #16
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	40000400 	.word	0x40000400
 8001a20:	40000800 	.word	0x40000800
 8001a24:	40000c00 	.word	0x40000c00
 8001a28:	40014000 	.word	0x40014000

08001a2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d101      	bne.n	8001a4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e0ae      	b.n	8001ba8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b0c      	cmp	r3, #12
 8001a56:	f200 809f 	bhi.w	8001b98 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001a60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a60:	08001a95 	.word	0x08001a95
 8001a64:	08001b99 	.word	0x08001b99
 8001a68:	08001b99 	.word	0x08001b99
 8001a6c:	08001b99 	.word	0x08001b99
 8001a70:	08001ad5 	.word	0x08001ad5
 8001a74:	08001b99 	.word	0x08001b99
 8001a78:	08001b99 	.word	0x08001b99
 8001a7c:	08001b99 	.word	0x08001b99
 8001a80:	08001b17 	.word	0x08001b17
 8001a84:	08001b99 	.word	0x08001b99
 8001a88:	08001b99 	.word	0x08001b99
 8001a8c:	08001b99 	.word	0x08001b99
 8001a90:	08001b57 	.word	0x08001b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68b9      	ldr	r1, [r7, #8]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f914 	bl	8001cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	699a      	ldr	r2, [r3, #24]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f042 0208 	orr.w	r2, r2, #8
 8001aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699a      	ldr	r2, [r3, #24]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 0204 	bic.w	r2, r2, #4
 8001abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6999      	ldr	r1, [r3, #24]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	691a      	ldr	r2, [r3, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	619a      	str	r2, [r3, #24]
      break;
 8001ad2:	e064      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68b9      	ldr	r1, [r7, #8]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f95a 	bl	8001d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6999      	ldr	r1, [r3, #24]
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	021a      	lsls	r2, r3, #8
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	619a      	str	r2, [r3, #24]
      break;
 8001b14:	e043      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f000 f9a5 	bl	8001e6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0208 	orr.w	r2, r2, #8
 8001b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0204 	bic.w	r2, r2, #4
 8001b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	69d9      	ldr	r1, [r3, #28]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	61da      	str	r2, [r3, #28]
      break;
 8001b54:	e023      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68b9      	ldr	r1, [r7, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 f9ef 	bl	8001f40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69da      	ldr	r2, [r3, #28]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	69da      	ldr	r2, [r3, #28]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	69d9      	ldr	r1, [r3, #28]
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	021a      	lsls	r2, r3, #8
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	430a      	orrs	r2, r1
 8001b94:	61da      	str	r2, [r3, #28]
      break;
 8001b96:	e002      	b.n	8001b9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b9c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a3a      	ldr	r2, [pc, #232]	@ (8001cac <TIM_Base_SetConfig+0xfc>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d00f      	beq.n	8001be8 <TIM_Base_SetConfig+0x38>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bce:	d00b      	beq.n	8001be8 <TIM_Base_SetConfig+0x38>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a37      	ldr	r2, [pc, #220]	@ (8001cb0 <TIM_Base_SetConfig+0x100>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <TIM_Base_SetConfig+0x38>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4a36      	ldr	r2, [pc, #216]	@ (8001cb4 <TIM_Base_SetConfig+0x104>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d003      	beq.n	8001be8 <TIM_Base_SetConfig+0x38>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4a35      	ldr	r2, [pc, #212]	@ (8001cb8 <TIM_Base_SetConfig+0x108>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d108      	bne.n	8001bfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	68fa      	ldr	r2, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a2b      	ldr	r2, [pc, #172]	@ (8001cac <TIM_Base_SetConfig+0xfc>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01b      	beq.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c08:	d017      	beq.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a28      	ldr	r2, [pc, #160]	@ (8001cb0 <TIM_Base_SetConfig+0x100>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a27      	ldr	r2, [pc, #156]	@ (8001cb4 <TIM_Base_SetConfig+0x104>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00f      	beq.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a26      	ldr	r2, [pc, #152]	@ (8001cb8 <TIM_Base_SetConfig+0x108>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d00b      	beq.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a25      	ldr	r2, [pc, #148]	@ (8001cbc <TIM_Base_SetConfig+0x10c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d007      	beq.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a24      	ldr	r2, [pc, #144]	@ (8001cc0 <TIM_Base_SetConfig+0x110>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d003      	beq.n	8001c3a <TIM_Base_SetConfig+0x8a>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a23      	ldr	r2, [pc, #140]	@ (8001cc4 <TIM_Base_SetConfig+0x114>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d108      	bne.n	8001c4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68fa      	ldr	r2, [r7, #12]
 8001c5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689a      	ldr	r2, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <TIM_Base_SetConfig+0xfc>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d103      	bne.n	8001c80 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691a      	ldr	r2, [r3, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d105      	bne.n	8001c9e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	f023 0201 	bic.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	40014000 	.word	0x40014000
 8001cc0:	40014400 	.word	0x40014400
 8001cc4:	40014800 	.word	0x40014800

08001cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	f023 0201 	bic.w	r2, r3, #1
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f023 0303 	bic.w	r3, r3, #3
 8001cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	f023 0302 	bic.w	r3, r3, #2
 8001d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	@ (8001d90 <TIM_OC1_SetConfig+0xc8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d10c      	bne.n	8001d3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	f023 0308 	bic.w	r3, r3, #8
 8001d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f023 0304 	bic.w	r3, r3, #4
 8001d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <TIM_OC1_SetConfig+0xc8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d111      	bne.n	8001d6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	697a      	ldr	r2, [r7, #20]
 8001d82:	621a      	str	r2, [r3, #32]
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	40010000 	.word	0x40010000

08001d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b087      	sub	sp, #28
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	f023 0210 	bic.w	r2, r3, #16
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	021b      	lsls	r3, r3, #8
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	f023 0320 	bic.w	r3, r3, #32
 8001dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a1e      	ldr	r2, [pc, #120]	@ (8001e68 <TIM_OC2_SetConfig+0xd4>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d10d      	bne.n	8001e10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	697a      	ldr	r2, [r7, #20]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a15      	ldr	r2, [pc, #84]	@ (8001e68 <TIM_OC2_SetConfig+0xd4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d113      	bne.n	8001e40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	621a      	str	r2, [r3, #32]
}
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000

08001e6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b087      	sub	sp, #28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001eb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	021b      	lsls	r3, r3, #8
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <TIM_OC3_SetConfig+0xd0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10d      	bne.n	8001ee6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	021b      	lsls	r3, r3, #8
 8001ed8:	697a      	ldr	r2, [r7, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <TIM_OC3_SetConfig+0xd0>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d113      	bne.n	8001f16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ef4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001efc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	011b      	lsls	r3, r3, #4
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	621a      	str	r2, [r3, #32]
}
 8001f30:	bf00      	nop
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40010000 	.word	0x40010000

08001f40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a1b      	ldr	r3, [r3, #32]
 8001f4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	021b      	lsls	r3, r3, #8
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	031b      	lsls	r3, r3, #12
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a10      	ldr	r2, [pc, #64]	@ (8001fdc <TIM_OC4_SetConfig+0x9c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d109      	bne.n	8001fb4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	019b      	lsls	r3, r3, #6
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	68fa      	ldr	r2, [r7, #12]
 8001fbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	621a      	str	r2, [r3, #32]
}
 8001fce:	bf00      	nop
 8001fd0:	371c      	adds	r7, #28
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 031f 	and.w	r3, r3, #31
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	6a1a      	ldr	r2, [r3, #32]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	43db      	mvns	r3, r3
 8002002:	401a      	ands	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6a1a      	ldr	r2, [r3, #32]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	6879      	ldr	r1, [r7, #4]
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	431a      	orrs	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002040:	2302      	movs	r3, #2
 8002042:	e050      	b.n	80020e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800206a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68fa      	ldr	r2, [r7, #12]
 800207c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a1c      	ldr	r2, [pc, #112]	@ (80020f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d018      	beq.n	80020ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002090:	d013      	beq.n	80020ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a18      	ldr	r2, [pc, #96]	@ (80020f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d00e      	beq.n	80020ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a16      	ldr	r2, [pc, #88]	@ (80020fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d009      	beq.n	80020ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a15      	ldr	r2, [pc, #84]	@ (8002100 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d004      	beq.n	80020ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a13      	ldr	r2, [pc, #76]	@ (8002104 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10c      	bne.n	80020d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	68ba      	ldr	r2, [r7, #8]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40010000 	.word	0x40010000
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800
 8002100:	40000c00 	.word	0x40000c00
 8002104:	40014000 	.word	0x40014000

08002108 <memset>:
 8002108:	4402      	add	r2, r0
 800210a:	4603      	mov	r3, r0
 800210c:	4293      	cmp	r3, r2
 800210e:	d100      	bne.n	8002112 <memset+0xa>
 8002110:	4770      	bx	lr
 8002112:	f803 1b01 	strb.w	r1, [r3], #1
 8002116:	e7f9      	b.n	800210c <memset+0x4>

08002118 <__libc_init_array>:
 8002118:	b570      	push	{r4, r5, r6, lr}
 800211a:	4d0d      	ldr	r5, [pc, #52]	@ (8002150 <__libc_init_array+0x38>)
 800211c:	4c0d      	ldr	r4, [pc, #52]	@ (8002154 <__libc_init_array+0x3c>)
 800211e:	1b64      	subs	r4, r4, r5
 8002120:	10a4      	asrs	r4, r4, #2
 8002122:	2600      	movs	r6, #0
 8002124:	42a6      	cmp	r6, r4
 8002126:	d109      	bne.n	800213c <__libc_init_array+0x24>
 8002128:	4d0b      	ldr	r5, [pc, #44]	@ (8002158 <__libc_init_array+0x40>)
 800212a:	4c0c      	ldr	r4, [pc, #48]	@ (800215c <__libc_init_array+0x44>)
 800212c:	f000 f826 	bl	800217c <_init>
 8002130:	1b64      	subs	r4, r4, r5
 8002132:	10a4      	asrs	r4, r4, #2
 8002134:	2600      	movs	r6, #0
 8002136:	42a6      	cmp	r6, r4
 8002138:	d105      	bne.n	8002146 <__libc_init_array+0x2e>
 800213a:	bd70      	pop	{r4, r5, r6, pc}
 800213c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002140:	4798      	blx	r3
 8002142:	3601      	adds	r6, #1
 8002144:	e7ee      	b.n	8002124 <__libc_init_array+0xc>
 8002146:	f855 3b04 	ldr.w	r3, [r5], #4
 800214a:	4798      	blx	r3
 800214c:	3601      	adds	r6, #1
 800214e:	e7f2      	b.n	8002136 <__libc_init_array+0x1e>
 8002150:	08002204 	.word	0x08002204
 8002154:	08002204 	.word	0x08002204
 8002158:	08002204 	.word	0x08002204
 800215c:	08002208 	.word	0x08002208

08002160 <memcpy>:
 8002160:	440a      	add	r2, r1
 8002162:	4291      	cmp	r1, r2
 8002164:	f100 33ff 	add.w	r3, r0, #4294967295
 8002168:	d100      	bne.n	800216c <memcpy+0xc>
 800216a:	4770      	bx	lr
 800216c:	b510      	push	{r4, lr}
 800216e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002172:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002176:	4291      	cmp	r1, r2
 8002178:	d1f9      	bne.n	800216e <memcpy+0xe>
 800217a:	bd10      	pop	{r4, pc}

0800217c <_init>:
 800217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217e:	bf00      	nop
 8002180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002182:	bc08      	pop	{r3}
 8002184:	469e      	mov	lr, r3
 8002186:	4770      	bx	lr

08002188 <_fini>:
 8002188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218a:	bf00      	nop
 800218c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218e:	bc08      	pop	{r3}
 8002190:	469e      	mov	lr, r3
 8002192:	4770      	bx	lr
